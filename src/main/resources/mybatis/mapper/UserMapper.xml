<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.min.cinemagreen.mapper.IUserMapper">

  <insert id="insertUser" parameterType="UserDTO">
    INSERT INTO user_t (
        user_no
      , email
      , pw
      , name
      , gender
      , mobile
      , sns
      , pw_modify_dt
      , signup_dt
      , postcode
      , address
      , detailAddress
      , extraAddress
    ) VALUES (
        user_seq.NEXTVAL
      , #{email}
      , #{pw}
      , #{name}
      , #{gender}
      , #{mobile}
      , #{sns}
      , CURRENT_DATE
      , CURRENT_DATE
      , #{postcode}
      , #{address}
      , #{detailAddress}
      , #{extraAddress}
    )
  </insert>
  
  <select id="getUserByMap" parameterType="Map" resultType="UserDTO">
    SELECT user_no, email, pw, name, gender, mobile, sns, pw_modify_dt, signup_dt, postcode, address, detailAddress, extraAddress           
      FROM user_t
    <where> 
      <if test="email != null">email = #{email}</if>
      <if test="pw != null">AND pw = #{pw}</if>
    </where>
  </select>
  
  <insert id="insertAccess" parameterType="Map">
    INSERT INTO access_t (
        access_no
      , email
      , ip
      , user_agent
      , session_id
      , signin_dt
    ) VALUES (
        access_seq.NEXTVAL
      , #{email}
      , #{ip}
      , #{userAgent}
      , #{sessionId}
      , CURRENT_DATE
    )
  </insert>
  
  <delete id="deleteUser" parameterType="int">
    DELETE
      FROM user_t
     WHERE user_no = #{userNo}
  </delete>
  
  <update id="updateInf" parameterType="UserDTO" >
    UPDATE user_t
       SET name = #{name}
         , mobile = #{mobile}
         , postcode = #{postcode}
         , address = #{address}
         , detailAddress = #{detailAddress}
         , extraAddress = #{extraAddress}
     WHERE user_no = #{userNo}
  </update>
  
  
  <update id="pwchange" parameterType="Map" >
    UPDATE user_t
       SET pw = #{pw}
         , pw_modify_dt = CURRENT_DATE
    WHERE 
      user_no = #{userNo}
       AND pw = #{oldpw}
  </update>
  
  
  <update id="pwupdate" parameterType="Map" >
    UPDATE user_t
       SET pw = #{pw}
         , pw_modify_dt = CURRENT_DATE
    WHERE 
        email = #{email}
  </update>
  
  <select id="emailfindDo" parameterType="Map" resultType="UserDTO">
    SELECT email           
      FROM user_t
     WHERE mobile = #{mobile}
  </select>
  
  <select id="overlapcheckDo" parameterType="UserDTO" resultType="UserDTO">
    SELECT email           
      FROM user_t
     WHERE 
        email = #{email}
  </select>
  
  <select id="xUsercheckDo" parameterType="UserDTO" resultType="UserDTO">
    SELECT email           
      FROM x_user_t
     WHERE 
        email = #{email}
  </select>

  <insert id="insertSnsUser" parameterType="UserDTO">
    INSERT INTO user_t (
        user_no
      , email
      , name
      , mobile
      , sns
      , pw_modify_dt
      , signup_dt
    ) VALUES (
        user_seq.NEXTVAL
      , #{email}
      , #{name}
      , #{mobile}
      , #{sns}
      , CURRENT_DATE
      , CURRENT_DATE
    )
  </insert>
  
  <select id="getsnsUserInfo" parameterType="UserDTO" resultType="UserDTO">
    SELECT user_no, email, name, mobile, sns, pw_modify_dt, signup_dt        
      FROM user_t
     WHERE 
        email = #{email}
  </select>
  
<!-- 블로그 부분 -->  
  <select id="getBlogCount" resultType="int">
    SELECT COUNT(*)
      FROM blog_t
  </select>
  
  
</mapper>